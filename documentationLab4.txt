Github link: https://github.com/eduard-C0/FLCD/tree/Lab4

The representation of the FA file in the EBNF form is:

File = {Line}
Line = TypeOfElements | state | alphabet | transition
TypeOfElements = "State" | "InitialState" | "FinalState" | "Alphabet" | "Transitions"
state = "p" | "q" | "r"
alphabet = "0" | "1"
transition = state " " alphabet " " state

/**
* This function will verify if a sequence of alphabet elements could be generated by our Finite Automaton
* @param sequence which is a string containing alphabet elements
* @return true, if the sequence can be obtained
*         false, otherwise
*/
public boolean checkSequence(String sequence)

The implementation description:

First of all we initialize a queue which will contain string lists containing two elements (currentSequence and the currentState).
We will add int the queue as first element an empty sequence and the initial state.

The algorithm will continue as long as our queue is not empty. First we will get and remove the head of the queue containing the currentSequence and the currentState.
We will check if the currentSequence is the one we are looking for and if the current state is int the list of final states.
If the conditions mentioned above are true we will return a true value meaning that ww can obtain the given sequence by our Finite Automaton.
If not we will filter our list of transitions to find just those which are starting with the currentState and we will iterate through all of them calculating the new obtained Sequence and the new obtained state.
At the end we will add to the queue as a list the new obtained sequence and the new obtained state.